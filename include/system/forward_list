#ifndef FORWARD_LIST_H
#define FORWARD_LIST_H

#include <memory>

namespace std {

// NOTE: does not satify std::forward_list interface for now. Probably best to
// just port a real stdlib soon.
template <typename T>
class forward_list {
 public:
  forward_list() : head(nullptr) {}
  ~forward_list();
  void push_front(T&& val);
  void pop_front();
  class iter;
  iter begin();
  iter end();
 private:
  struct Node {
    Node* next;
    T value;
  };
  Node* head;
};

template <typename T>
class forward_list<T>::iter {
 public:
  iter(Node* cur) : cur(cur) {}
  T& operator*() const {
    return cur->value;
  }
  iter& operator++() {
    cur = cur->next;
    return *this;
  }
  friend bool operator==(const iter& i1, const iter& i2) {
    return i1.cur == i2.cur;
  }
  friend bool operator!=(const iter& i1, const iter& i2) {
    return !(i1 == i2);
  }
 private:
  Node* cur;
};

template <typename T>
forward_list<T>::~forward_list() {
  for (Node* node = head; node != nullptr; node = node->next) {
    delete node;
  }
}

template <typename T>
void forward_list<T>::push_front(T&& value) {
  head = new Node{.next = head, .value = std::move(value)};
}

template <typename T>
void forward_list<T>::pop_front() {
  Node* old_head = head;
  head = head->next;
  delete old_head;
}

template <typename T>
typename forward_list<T>::iter forward_list<T>::begin() {
  return forward_list<T>::iter(head);
}

template <typename T>
typename forward_list<T>::iter forward_list<T>::end() {
  return forward_list<T>::iter(nullptr);
}

}

#endif
